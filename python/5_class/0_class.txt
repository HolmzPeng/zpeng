类和对象
    编程 = 算法 + 数据结构

    程序设计历史演化: 面向问题 -> 面向过程 -> 面向对象

    面向过程以算法优先
    面向对象以数据优先

    对象: 现实世界存在的事物
        属性: 静态特征 外观  -->     变量
        行为: 动态特征 功能  -->     函数/方法

    类: 具有相同特征的一组对象  ->   数据类型
        抽象数据类型            ->   自定义数据类型

        抽象数据类型的模板:
            抽象数据类型名 {
                属性
                行为
                逻辑关系 (人去思考)
            }

    OOP     面向对象语言
    OOD     面向对象设计
    OOA     面向对象分析

    面向对象的程序设计的四大特征:
        抽象
            数据抽象和过程抽象
        封装
            信息隐藏的过程(有选择的数据隐藏)
            防止意外的数据破坏
            更易于隔离和修复错误
            提高开发效率
        继承
            提高开发效率的重要手段
            增强代码可复用性
            为程序扩充提供了便利
        多态
            在代码执行的时候才能确定行为

    Python的面向对象
        一切皆于对象
        所有类都间接或直接继承object类 object是基类
        python的对象所有元素皆为属性
        python的面向对象核心为属性的搜索

-------------------------------------------------------------------------------
类的定义和实例
    类名即是类对象

    类的定义:
        class 类名:
            pass

    类的实例(创建实例对象):
        实例对象名 = 类名()

-------------------------------------------------------------------------------
类的属性
    在类里定义的变量为类的属性

    class 类名:
        属性名 = 属性值
        ...

    属性的访问:
        类名.属性名
            或
        实例对象名.属性名

    属性的修改:
        类名.属性名 = 新属性值
            或
        实例对象名.属性名 = 新属性值

    类名即是类对象, 修改属性值会影响接下来的新实例对象
    实例对象默认情况是没有属性, 会向类对象搜索属性
    实例对象对属性做了赋值动作, 就会在本实例对象生成新属性, 就不会向类对象搜索

    Python的类可以动态添加属性

-------------------------------------------------------------------------------
类的方法
    在类里定义的函数为类的方法

    类的方法的分类:
        常规方法
            def 方法名(self, ...)

            魔术方法/特殊方法(Python内置定义):
                def __方法名__(self, ...)

                __init__    构造方法, 在执行类对象时自动调用

        静态方法
            @staticmethod
            def 方法名(...)

        类方法
            @classmethod
            def 方法名(obj, ...)


    class 类名:
        def 方法名(形参列表...):
            pass

-------------------------------------------------------------------------------
