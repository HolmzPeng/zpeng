1. 在交互式python 解释器中测试对象与引用：

    测试多个变量指向同一个对象：
    a = 'python is good'    <-- 定义a变量
    b = a                   <-- 定义b变量
    id(a) == id(b)          <-- a 和b 的id 相同，
                                说明它们指向相同的对象

    测试对象的类型：
    a = 1                   <-- a指向一个整数
    a = 'text'              <-- 同一个a，可以指向一个字符串
    b = 123                 <-- b指向一个整数
    a + b                   <-- 出错，因为a，b所指的对象类型不同


2. 在交互式python中操作数字

    1. 定义一个数字
    2. 分别用十六进制/八进制/二进制的形式定义一个数字
    3. 定义一个小数
    4. 求10除以3的结果，去除小数部分 (//)
    5. 求10除以3的结果，保留小数部分 (/)
    6. 求10除以3的余数 (%)
    7. 求2的10次方 (**)
    8. 求-1 的绝对值 (abs)
    9. 打出20的十六进制/八进制/二进制表现形式 (hex, oct, bin)


3. 在交互式python中操作字符串

    1. 用三种方法定义三个字符串 (三种引号)
        'abc'
        "abc"
        """abc"""
    2. 定义一个包含三行数据的字符串 (""")
        """abc
        xyz
        123
        """
    3. 用加号串接两个字符串，中间用一个空格分隔 (+)
        'good' + ' ' + 'morning'
    4. 在屏幕上打印出连续的80个下划线 (*)
        '_' * 80
    5. 把字符串'python is good' 转成大写 (upper)
        'python is good'.upper()
    6. 把字符串'1 2 3' 切分开，变成一个包含三个元素的列表 (split)
        '1 2 3'.split()
    7. 用空格做分隔符，把列表['a', 'b', 'c'] 
       中的字符串串接成一个字符串 (join)
        ' '.join(['a', 'b', 'c'])
    8. num1值为10, num2值为11, 用字符串格式化方法生成
       '10 < 11' 这个字符串 (%)
       '%s < %s' % (num1, num2)


4. 在交互式python中操作列表

    1. 定义一个包含3个元素的列表
        data = ['good', 'bad', 'ugly']
    2. 取出列表[1, 2, 3] 中的数字2
        nums = [1, 2, 3]
        nums[1]
    3. 用两种方法取出列表[1, 2, 3] 中最后一个数字
        nums = [1, 2, 3]
        nums[-1]
        nums[2]
    4. 切出列表[1, 2, 3] 中从第二个元素开始直到结尾的所有元素
        nums[1:]
    5. 串接两个列表
        l1 + l2
    6. 测试数字2 是否在列表[1, 2, 3]中
        2 in [1, 2, 3]
    7. 在列表的尾部添加一个新的元素
        data.append(123)
    8. 在列表的头部添加一个新的元素
        data.insert(0, 123)
    9. 弹出列表头部的一个元素
        data.pop(0)
    10. 删除列表的第三个元素
        del data[2]
    11. 找出列表中数字2 的下标
        data.index(2)
    12. 计算出列表中数字2 出现的次数
        data.count(2)
    13. 求一个列表的长度
        len(data)
    14. 求列表[1, 2, 3] 的和/最大值/最小值
        sum(data), max(data), min(data)
    15. 给列表[1, 2, 3] 做从大到小的排序
        nums = [1, 2, 3]
        sorted(nums, reverse=True)


5. 在交互式python中操作元组

    1. 定义一个包含3个元素的元组
        (1, 2, 3)
    2. 定义一个包含一个元素的元组
        (1,)
    3. 取元组中的某个元素
        data[0]
    4. 给元组做切片操作
        data[1:]


6. 在交互式python中操作字典

    1. 用两种方法定义两个字典
        data = {'name': 'zhangsan', 'age': 30}
        data = dict(name='zhangsan', age=30)
    2. 给字典添加新的key和value
        data['sex'] = 'female'
    3. 把一个字典的所有key 转换成列表
        list(data.keys())
    4. 把一个字典的所有value 转换成列表
        list(data.values())
    5. 获取字典中某个key 的值，如果该key 不存在也不出错
        data['notexists']       <-- 不存在则出错
        data.get('notexists')   <-- 不存在也不出错
    6. 删除字典中某个key
        del data['name']
    7. 检查字典中是否包含名叫age 的key
        'age' in data
    8. 求字典中key 的总数
        len(data)


7. 在交互式python中操作集合

    1. 定义一个包含三个元素的集合
        {1, 2, 3}
        set([1, 2, 3])
    2. 用集合去除列表[1, 2, 2, 2]中重复的数字2
        set([1, 2, 2, 2])
    3. 向一个集合中添加元素
        data.add('good')
    4. 删除集合中一个元素
        data.pop()
        data.remove(3)
    5. 测试集合中是否包含了数字2
        2 in data
    6. 计算集合中元素的总数
        len(data)
    7. 求两个集合的交集
        s1 & s2
    8. 合并两个集合
        s1 | s2
    9. 求出在第一个集合中，但是不在第二个集合中的元素
        s1 - s2
    10. 检测第一个集合是否包含了第二个集合的全部元素
        s1 > s2


8. 按以下要求写一个程序：

    1. 通过input 函数从用户读取一个数字
    2. 把读取到的数据转换成整数，存放到名叫num 的变量中
    3. 如果num 小于10, 就输出"class one"，否则，
    4. 如果num 小于20, 就输出"class two"，否则，
    5. 如果num 小于30, 就输出"class three"，否则，
    6. 就输出"class four"

    def f():
        num = input('enter a number: ')
        num = int(num)
        if num < 10:
            print('class one')
        elif num < 20:
            print('class two')
        elif num < 30:
            print('class three')
        else:
            print('class four')


9. 按以下要求写一个程序：

    1. 在一个死循环中反复地从用户读取一行数据
    2. 把读到的数据打印出来，并在行首加上'echo > ' 字符串
    3. 如果读取到的是字符串q，就中止循环

    while True:
        data = input('enter something: ')
        if data == 'q':
            break
        print('echo > %s' % data)



10. 按以下要求写一个程序：

    1. 从命令行读取一个参数存放到名为num 的变量中
    2. 把num 的值转换成整数
    3. 用for 循环打印从1到num 的所有数，每个数一行
    4. 命令行的第一个参数可以从sys.argv[1] 获取

    参考流程：

    1. 写源文件
        gedit ~/num.py

       填入以下内容：
        import sys
        num = sys.argv[1]
        num = int(num)
        for i in range(1, num+1):
            print(i)

    2. 用这个命令运行该程序
        python ~/num.py 7


11. 在交互式python中操作列表推导式：

    1. 把列表[1, 2, 3] 中的所有数字都加上1, 生成新的列表
        data = [1, 2, 3]
        [n + 1 for n in data]
    2. 去除列表[1, 2, 3, 4] 中所有的偶数, 生成新的列表
        data = [1, 2, 3]
        [n for n in data if n%2==1]
