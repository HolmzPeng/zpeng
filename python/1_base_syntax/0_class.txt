Python - 开源通用的脚本编程语言
    开源  通用

计算机
    处理器      CPU
    存储器      内存/硬盘
    I/O设备

编程语言
    机器语言        0101010
    低级语言(汇编)  add 3 5
    高级语言        跨平台
        编译型      把文本代码转成二进制可执行文件
            C/C++ Go
        解析型      运行解析型实时解析文本代码(脚本语言)
            shell javascript NodeJs

        编译解析型  将文本代码转二进制代码(不可执行), 再使用解析型解析二进制代码运行
            java python php C#

Python的发展史
    http://120.76.144.128/python

学习编程语言的流程:
    熟悉编程语言的发展史
    搭建编程语言的开发环境(安装解析器或编译器 编辑器)
    编写hello程序 -> 代码编辑流程及代码执行流程
    变量 -> 数据类型
    运算符(操作符) -> 表达式 -> 语句
    流程控制语句 -> 顺序/分支/循环 -> if/while/for
    函数 -> 打包代码
    数组 -> 复合类型

    类和对象 -> 面向对象的编程思想
    系统编程
        文件I/O 进程及进程间通讯 网络

-------------------------------------------------------------------------------
Python开发环境
    官网: python.org
        提供下载python源代码和查看官方手册
        中文官方手册:
            http://usyiyi.cn/translate/python_352/index.html

    安装: sudo apt install python3 -y

    python      对应python版本2 2020停止维护
    python3     对应python版本3

    测试:
        python --version
        python3 --version

    编辑Python代码: vim hello.py
        print("hello world")

    运行Python代码:
        python3 hello.py

    直接运行python代码文件:
        在python代码文件第一行指定python解析器路径
        #!/usr/bin/python3

        更通用的写法(不管python3放在哪，只要在PATH变量中存在):
            #!/usr/bin/env python3

    Python交互开发模式
        交互开发模式用于测试和调试
        运行python3可进入交互开发模式(ctrl + D退出)

        推荐交互模式使用ipython3, 好处谁用谁知道
        安装:
            pip3工具是python模块或包管理工具
                安装pip3工具: sudo apt install python3-pip -y

            通过pip3工具安装ipython3:
                pip3 install ipython

            ipython3的功能:
                颜色显示用于区分
                直接可运行shell命令
                补全功能强大
                查看帮助简单

    Python程序如何执行:
        Python是属于编译解析型的脚本语言
        为了提高Python执行效率, Python解析会将*.py文件编译成字节码(二进制)
        再给Python虚拟机(PVM)去解析字节码运行

-------------------------------------------------------------------------------
变量
    Python变量是动态类型, 根据值的类型才能确定变量的类型
    Python变量定义时必须赋初始值
    标识符:
        内置标识符
        自定义标识符: 变量名 函数名 类名...

    定义变量/变量赋值
        变量名 = 值

    访问变量
        变量名

    删除变量
        del 变量名

    变量的值存储于内存
        Python变量赋值一切都是引用赋值
            变量名只是符号与值的内存地址绑定
        获取变量的地址: id函数

    变量命名规范:
        严格区分大小写
        数字 字母 特殊符合组合(个别特殊符号可以组合 如: 下划线)
        但不能以数字和特殊符号开头(下划线除外)
        如果不了解下划线的特殊意义不推荐使用
        Python3支持中文但不建议使用中文命名(容易引发乱码问题)
        不能与Python关键词重名
            查看Python关键词有哪些:
                import keyword
                print(keyword.kwlist)

    Python提供常用的数据结构(值的类型)
        数字
            整型        int
            浮点型      float
            复数
        字符串          str/repr
        布尔型          bool(Ture/False)
        列表            list        [,]
        元组            tuper       (,)
        字典            dict        {:, }
        集合            set         {,}
        NoneType        None

        获取变量的类型: type函数

-------------------------------------------------------------------------------
操作符
    算术操作符      + - * / % ** //
    比较操作符      > >= < <= == !=
        10 < b < 100
    赋值操作符      =
    增强赋值操作符  += -= *= /= %= **= //= &= |= ^= <<= >>=
    逻辑操作符      and or not
    位操作符(数字)  & | ^ << >> ~
    成员操作符      in/not in
    身份操作符      is/is not

-------------------------------------------------------------------------------
Python语句语法
    Python程序由多个逻辑行组成

    物理行: 人眼看到的行为物理行(行尾必须终止符的字符序列)
        windows: \r\n
        Unix: \n
        MacOS: \r

    逻辑行: 包含一个或多个物理行

    多个物理行连接一个逻辑行:
        显式连接        \
            不推荐使用显示连接
        隐式连接        所有括号 (推荐使用小括号)

    一个物理行包含多个逻辑行:
        a = 34 ; print(a)

    空白行: 交互模式代表一段代码的结束

    注释:  #代表注释符
        从注释符开始后面的内容为注释
        注释符针对物理行生效

    分隔符: , () {} [] : ; @ =

    缩进
        Python中标识代码块强制使用缩进对齐来区别(其它语言使用{}来区别)
        如果缩进没有对齐会报语法错误
        Tab和空格为缩进前导符
            Tab键在不同平台下解析不同
            Tab ==>     9
            空格 ==>    32

            一定要确定是使用Tab还是空格, 一般文本编辑器都提供Tab转换成空格
            空格:
                html/css    2个空格
                其它所有    4个空格

-------------------------------------------------------------------------------
简单的I/O函数
    input       输入
        s = input(["输入提示符"])
            返回用户输入的字符串

    print       输出
        print(变量, [...], sep=' ', end='\n')
            sep     控制前面输出多个变量之间分隔符
            end     控制输出终止符

-------------------------------------------------------------------------------
流程控制
    分支 if

    循环 while
