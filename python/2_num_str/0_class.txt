数字
    Python3当中数字是没有限制, 无限大

    数字存储原理:
        存储单位: 字节(最小单元)
            1个字节 = 8个位

        原码:   二进制
        补码:
            二进制转补码: 将二进制取反加1
            补码转二进制: 将补码减1再取反

        整型中正负在二进制表示使用最高位来描述(0代表正数, 1代表负数)
        正数的存储使用原码(正数的补码即是它原码)
        负数的存储使用补码

    获取数字的二进制位数:
        num = 1000
        num.bit_length()

    获取数字占内存空间:
        num.__sizeof__()

    整型        int
        + - * / % ** //

    浮点型      float (有坑小心)
        取整        int
        四舍五入    round

    布尔型      bool

    位操作 & | ^ >> << ~
        对数字按位进行操作
        &       按位与, 两个位都为1结果为1, 否则结果为0
        |       按位或, 两个位其中有一个为1结果为1, 否则为0
        ^       按位异或, 两个位不一样为1, 一样为0
        >>      按位右移位, 去除最右边的位数，前面补符号位
        <<      按位左移位，去除最左边的位数, 后面补0

        5   0000 0101
        3   0000 0011

        &   0000 0001   1
        |   0000 0111   7
        ^   0000 0110   6

        5 >> 1  0000 0101
                0000 0010   2

        5 << 1  0000 0101
                0000 1010   10

        -5 >> 1 0000 0101
                1111 1011   补码
                1111 1101   移位后补码
                1111 1100
                0000 0011    -2

        ~5      0000 0101
                1111 1010    -6
                0000 0110

        ~-5     1111 1011
                0000 0100   4

    进制转换
        Python中进制表示形式:
            二进制      0b010101(一般不会出现在编程当中)
            八进制      0o345
            十进制      145
            十六进制    0xa3f

        16以下数字二进制要背:
            0       0000
            1       0001
            2       0010
            3       0011
            4       0100
            5       0101
            6       0110
            7       0111
            8       1000
            9       1001
            a       1010
            b       1011
            c       1100
            d       1101
            e       1110
            f       1111

        十进制转其它进制: 短除法
            100 / 8     4
            12 / 8      4
            1 / 8       1
            0

            100 / 16    4
            6 / 16      6
            0

            100 / 2     0
            50 / 2      0
            25 / 2      1
            12 / 2      0
            6 / 2       0
            3 / 2       1
            1 / 2       1

        十六进制转二进制:
            0xFA  0b11111010

        八进制转二进制:
            0o64  0b110100

        其它进制转十进制:
            0xFA
                15 * 16**1 + 10 * 16**0 = 250

            0o100
                1 * 8**2 + 0 * 8**1 + 0 * 8**0 = 64

            0b1010
                1 * 2**3 + 0 * 2**2 + 1 * 2**1 + 0 * 2**0 = 10

    内置函数
        int     将任意进制转化成十进制, 返回整型
        bin     将任意进制转化成二进制, 返回字符串
        oct     将任意进制转化成八进制, 返回字符串
        hex     将任意进程转化成十六进制, 返回字符串

        sum     求和
        min     求最小值
        max     求最大值
        abs     求绝对值
        pow     取幂
        float   转换浮点数
        round   四舍五入

    数学库函数
        import math

-------------------------------------------------------------------------------
字符串
    字符串的特点
        字符串的字符从左到右顺序排列
        字符串不可改变
        字符串使用单引号 双引号 三双引号 三单引号引用来表示
        单引号和双引号没有区别, 三重引号可以跨多行

    字符串的定义
        a = "hello\nworld"

        前缀字符r/R, 表示非转义原始字符串(不处理\转义功能)
            a = r"hello\nworld"

            \n      换行
            \r      回车
            \b      删除
            \t      制表符
            \"      输出三引号
            \\      输出\
            \033    数字

        前缀b/B 使用单字节表示字符串(bytes)
            与普通字符串的区别是bytes类型访问是ASCII编码, 并非是字符
            a = b"hello"
                a[0]    输出104, 不是h字符

            ASCII码:
                'a'   97
                'A'   65
                '0'   48

            bytes与str之间转换:
                bytes转str: s.decode()
                str转bytes: s.encode()

            字符转数字: ord()
            数字转字符: chr()

    字符串格式化表达式
        'num = %d, str = %s, char = %c, hex = %x, oct = %o' % (100, "hello", 'H', 100, 100)
        "str = %s, char = %c" % ("hello", 97)
        "float = %f" % (3456.789)

        按10个字符位右对齐, 前面补空格
            "%10d"

        按10个字符位右对齐, 前面补零
            "%010d"

        按10个字符位左对齐
            "%-10d"

        按10个字符位左对齐, 后面补空格，并且保留两位小数点
            "%-10.2f"

-------------------------------------------------------------------------------
练习:

交换两个变量的值(至少两种方法)
    a, b = 3, 8

    第一种方法: a, b = b, a
    第二种方法: c = a ; a = b ; b = c
    第四种方法(性能高): a ^= b; b ^= a; a ^= b
    第三种方法: a += b ; b = a - b; a -= b


将输入的正整数二进制第5位置0, 第3位置1, 再输出
        0001 1011   0x1b
    &   1110 1111   0xef        ~(1 << 4)
    |   0000 0100   0x4         1 << 2

        0000 1111   0xf

    公式:
        置0: num &= ~(1 << bit)
        置1: num |= 1 << bit

统计输入正整数的二进制中有多少个1


对输入的一个字符转换大小写(只需要使用三目运算符和函数)
    (考虑输入字符串进行同样转换)

